{"remainingRequest":"c:\\PluralsightProjects\\webpack-starter-master\\vue-getting-started-master\\03-data-and-events\\end\\vue-heroes\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!c:\\PluralsightProjects\\webpack-starter-master\\vue-getting-started-master\\03-data-and-events\\end\\vue-heroes\\src\\components\\heroes.vue?vue&type=script&lang=js&","dependencies":[{"path":"c:\\PluralsightProjects\\webpack-starter-master\\vue-getting-started-master\\03-data-and-events\\end\\vue-heroes\\src\\components\\heroes.vue","mtime":1583448458571},{"path":"c:\\PluralsightProjects\\webpack-starter-master\\vue-getting-started-master\\03-data-and-events\\end\\vue-heroes\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"c:\\PluralsightProjects\\webpack-starter-master\\vue-getting-started-master\\03-data-and-events\\end\\vue-heroes\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"c:\\PluralsightProjects\\webpack-starter-master\\vue-getting-started-master\\03-data-and-events\\end\\vue-heroes\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"c:\\PluralsightProjects\\webpack-starter-master\\vue-getting-started-master\\03-data-and-events\\end\\vue-heroes\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport axios from 'axios';\n//import numbro from 'numbro';\nvar numbro = require(\"numbro\");\nimport regression from 'regression';\n\nexport default {\n  name: \"metalCalculator\",\n  data() {\n    return {\n      formName: \"Calculator\",\n       metals:{\n         gold:{\n           price: 0,\n           gramPrice: 0,\n           grams: 0,\n           selectedKarat: {name: \"24K\", value:1},\n           karats: [\n                {name: \"24K\", value:1},\n                {name:\"22K\", value:.917},\n                {name:\"18K\", value:.75},\n                {name:\"14K\", value:.583},\n                {name:\"10K\", value:.417},\n                {name:\"8K\", value:.2}\n           ],\n           isActive: true,\n           timer: null,\n           data: []\n         },\n         silver:{\n           price: 0,\n           gramPrice: 0,\n           grams: 0,\n           selectedPurity: [{name: \"Fine\", value:1}, {name: \"Sterling\", value: .925}],\n           timer: null,\n           data: {}\n         }\n       },\n       message: ''\n    };\n  },\n  computed: {\n    goldGramValue() {\n      let ggv = numbro.unformat(this.metals.gold.gramPrice) * numbro.unformat(this.metals.gold.grams?this.metals.gold.grams:0) * this.metals.gold.selectedKarat.value;\n      return this.formatCurrency(ggv);\n    },\n    goldGramValueDayTrend() {\n      let prediction = 0;\n      if(this.metals.gold.data.length > 0){\n        let dayCount = 30;\n        //Take the dayCount number of items, put them in an array adding an Identifier starting at 1\n        let data = [...this.metals.gold.data.slice(0, dayCount)].reverse().map((i, index) => [index + 1 , i[1]]);\n        console.log(data);\n        let r = regression.linear(data);\n        prediction = r.predict(dayCount + 7)[1];\n        prediction = numbro(prediction / 31.1).formatCurrency({mantissa:2});\n      }\n      console.log(prediction);\n      return prediction;\n    },\n    silverGramValue() {\n      let sgv = numbro.unformat(this.metals.silver.gramPrice) * numbro.unformat(this.metals.silver.grams?this.metals.silver.grams:0);\n      return this.formatCurrency(sgv);\n    },\n  },\n\n  watch: {\n    'metals.gold.price'(newVal, oldVal) {\n      let vm = this;\n      //TODO Switch isActive flag so red appears only on price change\n      //alert(`yes, computed property changed from ${newVal} to ${oldVal}`);\n      if (newVal > oldVal) {\n        vm._data.metals.gold.isActive = true;\n      }\n      else {\n        vm._data.metals.gold.isActive = false;\n      }\n      return vm;\n    },\n\n  },\n\n  methods: {\n    cancelmetal() {\n      this.message = '';\n    },\n    clearkarat() {\n      this.metals.gold.selectedKarat = 1;\n    },\n    savemetal() {\n      // This only updates when you click the save button\n      this.message = JSON.stringify(this.metals, null, '\\n ');\n    },\n    formatCurrency(val) {\n      return numbro(val).formatCurrency({thousandSeparated: true,\n                                         mantissa:2});\n    },\n    goldTimer() {\n      if (Math.floor(Math.random() * 10) >= 4) {\n        this.updateGoldValue(this.metals.gold.price + .314);\n      }\n      else{\n        this.updateGoldValue(this.metals.gold.price - .314);\n      } \n    },\n    updateGoldValue(goldPrice) {\n      this.metals.gold.price = goldPrice;\n      this.metals.gold.gramPrice = numbro(goldPrice / 31.1).formatCurrency({mantissa:2});\n      //console.log(goldPrice);\n\n    },\n    silverTimer() {\n      if (Math.floor(Math.random() * 10) >= 4) {\n        this.updateSilverValue(this.metals.silver.price + .01);\n      }\n      else{\n        this.updateSilverValue(this.metals.silver.price - .01);\n      } \n    },\n    updateSilverValue(silverPrice) {\n      this.metals.silver.price = silverPrice;\n      this.metals.silver.gramPrice = numbro(silverPrice / 31.1).formatCurrency({mantissa:2});\n      //console.log(silverPrice);\n    }, \n    },\n\n  created () {\n    axios\n      .get('https://www.quandl.com/api/v3/datasets/LBMA/GOLD.json?api_key=onMsLhc34xCSgUj-sj2q')\n      .then(response => {\n         this.metals.gold.data = response.data.dataset.data;\n         this.updateGoldValue(response.data.dataset.data[0][1]);\n         //if (!this.metals.gold.timer) {\n           //this.metals.gold.timer = setInterval(this.goldTimer,3000)\n         //}\n      });\n\n    axios\n      .get('https://www.quandl.com/api/v3/datasets/LBMA/SILVER.json?api_key=onMsLhc34xCSgUj-sj2q')\n      .then(response => {\n        this.metals.silver.data = response.data;\n        this.updateSilverValue(response.data.dataset.data[0][1]);\n        //if (!this.metals.silver.timer) {\n           //this.metals.silver.timer = setInterval(this.silverTimer,3000);\n           \n         //}\n      })\n      \n  },\n\n\n};\n",{"version":3,"sources":["heroes.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmfile":"heroes.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class=\"content-container\">\n    <marquee behavior=\"scroll\" direction=\"left\" id=\"marquee\">Gold Price Per Ounce <span :class=\"[metals.gold.isActive ? 'metalUp' : '']\">{{ formatCurrency(metals.gold.price) }}</span> Silver Price Per Ounce {{ formatCurrency(metals.silver.price) }}</marquee>\n    <div class=\"section content-title-group\">\n      \n    </div>\n    <div class=\"columns\">\n      <div class=\"column is-8\">\n        <div class=\"card edit-detail\">\n          <header class=\"card-header\">\n            <p class=\"card-header-title\">{{ formName }}</p>\n          </header>\n          <div class=\"card-content\">\n            <div class=\"content\"> \n              <p class=\"name\">Gold</p>           \n              <div class=\"columns\">\n                <div class=\"column is-3\">\n                  <label class=\"label\" for=\"goldGramPrice\"> Price Per Gram</label>\n                  <input class=\"input\" id=\"goldGramPrice\" v-model=\"metals.gold.gramPrice\" />\n                </div>\n                <div class=\"column is-3\">\n                  <label class=\"label\" for=\"goldGrams\">Number of Grams</label>\n                  <input class=\"input\" id=\"goldGrams\" v-model=\"metals.gold.grams\" />\n                </div>\n                <div class=\"column is-2\">\n                  <label class=\"label\">Karat </label>\n                  <div class=\"control\">\n                    <div class=\"select\">\n                      <select v-model=\"metals.gold.selectedKarat\" @keyup.esc=\"clearkarat\">\n                        <option v-for=\"(karat,index) in metals.gold.karats\" :key=\"index\" :value=\"karat\">{{karat.name}}</option>\n                      </select>\n                    </div>\n                  </div>\n                </div>\n                <div class=\"column is-4\">\n                  <label class=\"label\" for=\"goldGramValue\">Value</label>\n                  <label class=\"input\" id=\"goldGramValue\" readonly>{{ goldGramValue }}</label>\n              </div>\n              </div>\n              <label class=\"label\" for=\"goldGramValueDayTrend\">1 Week Projected Value</label>\n              <label class=\"input\" id=\"goldGramValueDayTrend\" readonly>{{ goldGramValueDayTrend }}</label>\n\n              <br><br>\n\n              <p class=\"name\">Silver</p>           \n              <div class=\"columns\">\n                <div class=\"column is-3\">\n                  <label class=\"label\" for=\"silverGramPrice\"> Price Per Gram</label>\n                  <input class=\"input\" id=\"silverGramPrice\" v-model=\"metals.silver.gramPrice\" />\n                </div>\n                <div class=\"column is-3\">\n                  <label class=\"label\" for=\"goldGrams\">Number of Grams</label>\n                  <input class=\"input\" id=\"goldGrams\" v-model=\"metals.silver.grams\" />\n                </div>\n                <div class=\"column is-2\">\n                  \n\n                  <label class=\"label\">Purity</label>\n                  <div class=\"control\">\n                    <label class=\"radio\">\n                      <input type=\"radio\" name=\"fine\" checked>\n                      Fine\n                    </label>\n                    <label class=\"radio\">\n                      <input type=\"radio\" name=\"sterling\">\n                      Sterling\n                    </label>\n                  </div>\n                </div>\n                <div class=\"column is-4\">\n                  <label class=\"label\" for=\"goldGramValue\">Value</label>\n                  <label class=\"input\" id=\"goldGramValue\" readonly>{{ silverGramValue }}</label>\n              </div>\n              </div>\n            </div> \n          </div> \n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\n//import numbro from 'numbro';\nvar numbro = require(\"numbro\");\nimport regression from 'regression';\n\nexport default {\n  name: \"metalCalculator\",\n  data() {\n    return {\n      formName: \"Calculator\",\n       metals:{\n         gold:{\n           price: 0,\n           gramPrice: 0,\n           grams: 0,\n           selectedKarat: {name: \"24K\", value:1},\n           karats: [\n                {name: \"24K\", value:1},\n                {name:\"22K\", value:.917},\n                {name:\"18K\", value:.75},\n                {name:\"14K\", value:.583},\n                {name:\"10K\", value:.417},\n                {name:\"8K\", value:.2}\n           ],\n           isActive: true,\n           timer: null,\n           data: []\n         },\n         silver:{\n           price: 0,\n           gramPrice: 0,\n           grams: 0,\n           selectedPurity: [{name: \"Fine\", value:1}, {name: \"Sterling\", value: .925}],\n           timer: null,\n           data: {}\n         }\n       },\n       message: ''\n    };\n  },\n  computed: {\n    goldGramValue() {\n      let ggv = numbro.unformat(this.metals.gold.gramPrice) * numbro.unformat(this.metals.gold.grams?this.metals.gold.grams:0) * this.metals.gold.selectedKarat.value;\n      return this.formatCurrency(ggv);\n    },\n    goldGramValueDayTrend() {\n      let prediction = 0;\n      if(this.metals.gold.data.length > 0){\n        let dayCount = 30;\n        //Take the dayCount number of items, put them in an array adding an Identifier starting at 1\n        let data = [...this.metals.gold.data.slice(0, dayCount)].reverse().map((i, index) => [index + 1 , i[1]]);\n        console.log(data);\n        let r = regression.linear(data);\n        prediction = r.predict(dayCount + 7)[1];\n        prediction = numbro(prediction / 31.1).formatCurrency({mantissa:2});\n      }\n      console.log(prediction);\n      return prediction;\n    },\n    silverGramValue() {\n      let sgv = numbro.unformat(this.metals.silver.gramPrice) * numbro.unformat(this.metals.silver.grams?this.metals.silver.grams:0);\n      return this.formatCurrency(sgv);\n    },\n  },\n\n  watch: {\n    'metals.gold.price'(newVal, oldVal) {\n      let vm = this;\n      //TODO Switch isActive flag so red appears only on price change\n      //alert(`yes, computed property changed from ${newVal} to ${oldVal}`);\n      if (newVal > oldVal) {\n        vm._data.metals.gold.isActive = true;\n      }\n      else {\n        vm._data.metals.gold.isActive = false;\n      }\n      return vm;\n    },\n\n  },\n\n  methods: {\n    cancelmetal() {\n      this.message = '';\n    },\n    clearkarat() {\n      this.metals.gold.selectedKarat = 1;\n    },\n    savemetal() {\n      // This only updates when you click the save button\n      this.message = JSON.stringify(this.metals, null, '\\n ');\n    },\n    formatCurrency(val) {\n      return numbro(val).formatCurrency({thousandSeparated: true,\n                                         mantissa:2});\n    },\n    goldTimer() {\n      if (Math.floor(Math.random() * 10) >= 4) {\n        this.updateGoldValue(this.metals.gold.price + .314);\n      }\n      else{\n        this.updateGoldValue(this.metals.gold.price - .314);\n      } \n    },\n    updateGoldValue(goldPrice) {\n      this.metals.gold.price = goldPrice;\n      this.metals.gold.gramPrice = numbro(goldPrice / 31.1).formatCurrency({mantissa:2});\n      //console.log(goldPrice);\n\n    },\n    silverTimer() {\n      if (Math.floor(Math.random() * 10) >= 4) {\n        this.updateSilverValue(this.metals.silver.price + .01);\n      }\n      else{\n        this.updateSilverValue(this.metals.silver.price - .01);\n      } \n    },\n    updateSilverValue(silverPrice) {\n      this.metals.silver.price = silverPrice;\n      this.metals.silver.gramPrice = numbro(silverPrice / 31.1).formatCurrency({mantissa:2});\n      //console.log(silverPrice);\n    }, \n    },\n\n  created () {\n    axios\n      .get('https://www.quandl.com/api/v3/datasets/LBMA/GOLD.json?api_key=onMsLhc34xCSgUj-sj2q')\n      .then(response => {\n         this.metals.gold.data = response.data.dataset.data;\n         this.updateGoldValue(response.data.dataset.data[0][1]);\n         //if (!this.metals.gold.timer) {\n           //this.metals.gold.timer = setInterval(this.goldTimer,3000)\n         //}\n      });\n\n    axios\n      .get('https://www.quandl.com/api/v3/datasets/LBMA/SILVER.json?api_key=onMsLhc34xCSgUj-sj2q')\n      .then(response => {\n        this.metals.silver.data = response.data;\n        this.updateSilverValue(response.data.dataset.data[0][1]);\n        //if (!this.metals.silver.timer) {\n           //this.metals.silver.timer = setInterval(this.silverTimer,3000);\n           \n         //}\n      })\n      \n  },\n\n\n};\n</script>\n"]}]}