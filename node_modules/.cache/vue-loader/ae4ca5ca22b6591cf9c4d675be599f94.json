{"remainingRequest":"C:\\PluralsightProjects\\webpack-starter-master\\Resume\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\PluralsightProjects\\webpack-starter-master\\Resume\\src\\views\\synth.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\PluralsightProjects\\webpack-starter-master\\Resume\\src\\views\\synth.vue","mtime":1662579108385},{"path":"C:\\PluralsightProjects\\webpack-starter-master\\Resume\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\PluralsightProjects\\webpack-starter-master\\Resume\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\PluralsightProjects\\webpack-starter-master\\Resume\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\PluralsightProjects\\webpack-starter-master\\Resume\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\PluralsightProjects\\webpack-starter-master\\Resume\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport * as Tone from 'tone';\r\nimport drummer from './drummer.vue';\r\nconst filter = new Tone.Filter(400, 'lowpass').toDestination();\r\nconst feedbackDelay = new Tone.FeedbackDelay(0.5, 0.5).toDestination();\r\nconst dist = new Tone.Distortion(0.8).toDestination();\r\nconst phaser = new Tone.Phaser({\r\n\tfrequency: 15,\r\n\toctaves: 5,\r\n\tbaseFrequency: 1000\r\n}).toDestination();\r\nconst fm = new Tone.FMSynth().toDestination().connect(dist);\r\nconst am = new Tone.AMSynth().toDestination().connect(dist);\r\nconst duo = new Tone.DuoSynth().toDestination().connect(dist);\r\nconst poly = new Tone.PolySynth().toDestination().connect(dist);\r\n\r\nexport default {\r\n  components: { drummer },\r\n  name: 'synth',\r\n  data() {\r\n    return {\r\n      formName: 'synth',\r\n      notes: [\r\n        {\r\n          letter: 'a',\r\n          validKeys: [65, 97],\r\n          pattern: 'D',\r\n          isPlaying: false,\r\n          note: 'D1',\r\n          noteDuration: 1,\r\n          styleDuration: 500,\r\n        },\r\n        {\r\n          letter: 's',\r\n          validKeys: [115, 83],\r\n          pattern: 'D#',\r\n          isPlaying: false,\r\n          note: 'D#1',\r\n          noteDuration: 1,\r\n          styleDuration: 500,\r\n        },\r\n        {\r\n          letter: 'd',\r\n          validKeys: [68, 100],\r\n          pattern: 'E',\r\n          isPlaying: false,\r\n          note: 'E1',\r\n          noteDuration: 1,\r\n          styleDuration: 500,\r\n        },\r\n        {\r\n          letter: 'f',\r\n          validKeys: [70, 102],\r\n          pattern: 'F',\r\n          isPlaying: false,\r\n          note: 'F1',\r\n          noteDuration: 1,\r\n          styleDuration: 500,\r\n        },\r\n        {\r\n          letter: 'g',\r\n          validKeys: [71, 103],\r\n          pattern: 'D',\r\n          isPlaying: false,\r\n          note: 'D2',\r\n          noteDuration: 1,\r\n          styleDuration: 500,\r\n        },\r\n        {\r\n          letter: 'h',\r\n          validKeys: [72, 104],\r\n          pattern: 'D#',\r\n          isPlaying: false,\r\n          note: 'D#2',\r\n          noteDuration: 1,\r\n          styleDuration: 500,\r\n        },\r\n        {\r\n          letter: 'j',\r\n          validKeys: [74, 106],\r\n          pattern: 'E',\r\n          isPlaying: false,\r\n          note: 'E2',\r\n          noteDuration: 1,\r\n          styleDuration: 500,\r\n        },\r\n      ],\r\n      samples: [\r\n        {\r\n          letter: 'q',\r\n          validKeys: [81, 113],\r\n          isPlaying: false,\r\n          pattern: 'Warp Core',\r\n          url: require('../assets/sounds/synth_warp_core1.wav'),\r\n          styleDuration: 15000,\r\n        },\r\n        {\r\n          letter: 'w',\r\n          validKeys: [87, 119],\r\n          isPlaying: false,\r\n          pattern: 'Mars',\r\n          url: require('../assets/sounds/martin_sounds_1.wav'),\r\n          styleDuration: 20000,\r\n        },\r\n        {\r\n          letter: 'e',\r\n          validKeys: [69, 101],\r\n          isPlaying: false,\r\n          pattern: 'Gong',\r\n          url: require('../assets/sounds/madgong.wav'),\r\n          styleDuration: 12000,\r\n        },\r\n        {\r\n          letter: 'r',\r\n          validKeys: [82, 114],\r\n          isPlaying: false,\r\n          pattern: 'Theremin',\r\n          url: require('../assets/sounds/gurgling_theremin_1.wav'),\r\n          styleDuration: 9000,\r\n        },\r\n        {\r\n          letter: 't',\r\n          validKeys: [84, 116],\r\n          isPlaying: false,\r\n          pattern: 'Ghost',\r\n          url: require('../assets/sounds/ghost_1.wav'),\r\n          styleDuration: 8000,\r\n        },\r\n      ],\r\n      selectedSynth: { name: 'FMSynth', value: 'FM' },\r\n      synths: [\r\n            { name: 'FMSynth', value: 1 },\r\n            { name: 'AMSynth', value: 2 },\r\n            { name: 'DuoSynth', value: 3 },\r\n            { name: 'PolySynth', value: 4 },\r\n          ],\r\n    };\r\n  },\r\n  mounted() {\r\n    let vm = this;\r\n    window.addEventListener('keypress', e => {\r\n      //console.log(e.keyCode);\r\n      //Get the keyboard inputs for the notes row\r\n      let note = vm.notes.find(\r\n        s => s.validKeys.findIndex(i => i === e.keyCode) >= 0\r\n      );\r\n\r\n    //Get the keyboard inputs for the samples row\r\n    let sample = vm.samples.find(\r\n        s => s.validKeys.findIndex(i => i === e.keyCode) >= 0\r\n      );\r\n\r\n    //Get value of currently selected synth\r\n    let selectedSynth = vm.selectedSynth.value;\r\n    //console.log(selectedSynth);\r\n\r\n    // Reset property for CSS transition on notes row\r\n      function resetNoteTransition() {\r\n        note.isPlaying = false;\r\n      }\r\n\r\n    // Reset property for CSS transition on samples row\r\n      function resetSampleTransition() {\r\n        sample.isPlaying = false;\r\n      }\r\n\r\n      //toggle focus on synth input\r\n      function focusInput() {\r\n        vm.$refs.synthSelect.focus();\r\n      }\r\n\r\n    // Play a note given the set duration, start css effect\r\n      if (note && selectedSynth == 1) {\r\n        focusInput();\r\n        var instrument = fm.triggerAttackRelease(note.note, note.noteDuration);\r\n        //Kick off CSS effects\r\n        note.isPlaying = true;\r\n        setTimeout(resetNoteTransition, note.styleDuration);\r\n      } \r\n      else if (note && selectedSynth == 2) {\r\n        var instrument = am.triggerAttackRelease(note.note, note.noteDuration);\r\n        //Kick off CSS effects\r\n        note.isPlaying = true;\r\n        setTimeout(resetNoteTransition, note.styleDuration);\r\n      } else if (note && selectedSynth == 3){\r\n        var instrument = duo.triggerAttackRelease(note.note, note.noteDuration);\r\n        //Kick off CSS effects\r\n        note.isPlaying = true;\r\n        setTimeout(resetNoteTransition, note.styleDuration);\r\n      } else if (note && selectedSynth == 4) {\r\n        var instrument = poly.triggerAttackRelease([note.note, 'A4', 'D#3'], note.noteDuration);\r\n        //Kick off CSS effects\r\n        note.isPlaying = true;\r\n        setTimeout(resetNoteTransition, note.styleDuration);\r\n      }\r\n\r\n      // Play audio sample and start CSS effect for the property's duration\r\n      const player = new Tone.Player(sample.url).toDestination();\r\n      Tone.loaded().then(() => {\r\n        player.start();\r\n        // connect the player to the feedback delay and filter in parallel\r\n        player.connect(filter);\r\n        player.connect(feedbackDelay);\r\n        sample.isPlaying = true;\r\n        setTimeout(resetSampleTransition, sample.styleDuration);\r\n      });\r\n    });\r\n  },\r\n};\r\n",{"version":3,"sources":["synth.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAufile":"synth.vue","sourceRoot":"src/views","sourcesContent":["<style scoped>\r\nhtml {\r\n  font-size: 10px;\r\n  background: url('https://i.imgur.com/b9r5sEL.jpg') bottom center;\r\n  background-size: cover;\r\n}\r\n\r\nbody,\r\nhtml {\r\n  margin: 0;\r\n  padding: 0;\r\n  font-family: sans-serif;\r\n}\r\n\r\n.keys {\r\n  display: flex;\r\n  flex: 1;\r\n  min-height: 25vh;\r\n  align-items: center;\r\n  justify-content: center;\r\n}\r\n\r\n.key {\r\n  border: 0.4rem solid black;\r\n  border-radius: 0.5rem;\r\n  margin: 1rem;\r\n  font-size: 1.5rem;\r\n  padding: 1rem 0.5rem;\r\n  transition: all 1s ease;\r\n  /* transition: all .07s ease; */\r\n  width: 10rem;\r\n  text-align: center;\r\n  color: white;\r\n  background: rgba(0, 0, 0, 0.4);\r\n  text-shadow: 0 0 0.5rem black;\r\n}\r\n\r\n.playing {\r\n  transform: scale(1.1);\r\n  border-color: red;\r\n  box-shadow: red;\r\n}\r\n\r\nkbd {\r\n  display: block;\r\n  font-size: 4rem;\r\n}\r\n\r\n.sound {\r\n  font-size: 1.2rem;\r\n  text-transform: uppercase;\r\n  letter-spacing: 0.1rem;\r\n  color: #1eff00;\r\n}\r\n</style>\r\n\r\n<template>\r\n  <div class=\"content-container\">\r\n    <div class=\"keys column is-11\">\r\n        <span\r\n        class=\"key\"\r\n        v-for=\"sample in samples\"\r\n        :key=\"sample.validKeys[0]\"\r\n        :value=\"sample.letter\"\r\n        :class=\"[sample.isPlaying ? 'playing sound' : '']\"\r\n        >{{ sample.letter }}\r\n        <br />\r\n        <span class=\"sound\">{{ sample.pattern }}</span>\r\n      </span>\r\n    </div>\r\n    <div class=\"keys column is-11\">\r\n      <span\r\n        class=\"key\"\r\n        v-for=\"note in notes\"\r\n        :key=\"note.validKeys[0]\"\r\n        :value=\"note.letter\"\r\n        :class=\"[note.isPlaying ? 'playing sound' : '']\"\r\n        >{{ note.letter }}\r\n        <br />\r\n        <span class=\"sound\">{{ note.pattern }}</span>\r\n      </span>\r\n    </div>\r\n    <div class=\"column is-2\">\r\n        <label class=\"label\">Select a Synth</label>\r\n            <div class=\"control\">\r\n                <div class=\"select\" ref=\"synthSelect\">\r\n                      <select\r\n                        v-model=\"selectedSynth\"\r\n                      >\r\n                        <option\r\n                          v-for=\"(synth, index) in synths\"\r\n                          :key=\"index\"\r\n                          :value=\"synth\"\r\n                          >{{ synth.name }}</option\r\n                        >\r\n                      </select>\r\n                </div>\r\n            </div>\r\n    </div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport * as Tone from 'tone';\r\nimport drummer from './drummer.vue';\r\nconst filter = new Tone.Filter(400, 'lowpass').toDestination();\r\nconst feedbackDelay = new Tone.FeedbackDelay(0.5, 0.5).toDestination();\r\nconst dist = new Tone.Distortion(0.8).toDestination();\r\nconst phaser = new Tone.Phaser({\r\n\tfrequency: 15,\r\n\toctaves: 5,\r\n\tbaseFrequency: 1000\r\n}).toDestination();\r\nconst fm = new Tone.FMSynth().toDestination().connect(dist);\r\nconst am = new Tone.AMSynth().toDestination().connect(dist);\r\nconst duo = new Tone.DuoSynth().toDestination().connect(dist);\r\nconst poly = new Tone.PolySynth().toDestination().connect(dist);\r\n\r\nexport default {\r\n  components: { drummer },\r\n  name: 'synth',\r\n  data() {\r\n    return {\r\n      formName: 'synth',\r\n      notes: [\r\n        {\r\n          letter: 'a',\r\n          validKeys: [65, 97],\r\n          pattern: 'D',\r\n          isPlaying: false,\r\n          note: 'D1',\r\n          noteDuration: 1,\r\n          styleDuration: 500,\r\n        },\r\n        {\r\n          letter: 's',\r\n          validKeys: [115, 83],\r\n          pattern: 'D#',\r\n          isPlaying: false,\r\n          note: 'D#1',\r\n          noteDuration: 1,\r\n          styleDuration: 500,\r\n        },\r\n        {\r\n          letter: 'd',\r\n          validKeys: [68, 100],\r\n          pattern: 'E',\r\n          isPlaying: false,\r\n          note: 'E1',\r\n          noteDuration: 1,\r\n          styleDuration: 500,\r\n        },\r\n        {\r\n          letter: 'f',\r\n          validKeys: [70, 102],\r\n          pattern: 'F',\r\n          isPlaying: false,\r\n          note: 'F1',\r\n          noteDuration: 1,\r\n          styleDuration: 500,\r\n        },\r\n        {\r\n          letter: 'g',\r\n          validKeys: [71, 103],\r\n          pattern: 'D',\r\n          isPlaying: false,\r\n          note: 'D2',\r\n          noteDuration: 1,\r\n          styleDuration: 500,\r\n        },\r\n        {\r\n          letter: 'h',\r\n          validKeys: [72, 104],\r\n          pattern: 'D#',\r\n          isPlaying: false,\r\n          note: 'D#2',\r\n          noteDuration: 1,\r\n          styleDuration: 500,\r\n        },\r\n        {\r\n          letter: 'j',\r\n          validKeys: [74, 106],\r\n          pattern: 'E',\r\n          isPlaying: false,\r\n          note: 'E2',\r\n          noteDuration: 1,\r\n          styleDuration: 500,\r\n        },\r\n      ],\r\n      samples: [\r\n        {\r\n          letter: 'q',\r\n          validKeys: [81, 113],\r\n          isPlaying: false,\r\n          pattern: 'Warp Core',\r\n          url: require('../assets/sounds/synth_warp_core1.wav'),\r\n          styleDuration: 15000,\r\n        },\r\n        {\r\n          letter: 'w',\r\n          validKeys: [87, 119],\r\n          isPlaying: false,\r\n          pattern: 'Mars',\r\n          url: require('../assets/sounds/martin_sounds_1.wav'),\r\n          styleDuration: 20000,\r\n        },\r\n        {\r\n          letter: 'e',\r\n          validKeys: [69, 101],\r\n          isPlaying: false,\r\n          pattern: 'Gong',\r\n          url: require('../assets/sounds/madgong.wav'),\r\n          styleDuration: 12000,\r\n        },\r\n        {\r\n          letter: 'r',\r\n          validKeys: [82, 114],\r\n          isPlaying: false,\r\n          pattern: 'Theremin',\r\n          url: require('../assets/sounds/gurgling_theremin_1.wav'),\r\n          styleDuration: 9000,\r\n        },\r\n        {\r\n          letter: 't',\r\n          validKeys: [84, 116],\r\n          isPlaying: false,\r\n          pattern: 'Ghost',\r\n          url: require('../assets/sounds/ghost_1.wav'),\r\n          styleDuration: 8000,\r\n        },\r\n      ],\r\n      selectedSynth: { name: 'FMSynth', value: 'FM' },\r\n      synths: [\r\n            { name: 'FMSynth', value: 1 },\r\n            { name: 'AMSynth', value: 2 },\r\n            { name: 'DuoSynth', value: 3 },\r\n            { name: 'PolySynth', value: 4 },\r\n          ],\r\n    };\r\n  },\r\n  mounted() {\r\n    let vm = this;\r\n    window.addEventListener('keypress', e => {\r\n      //console.log(e.keyCode);\r\n      //Get the keyboard inputs for the notes row\r\n      let note = vm.notes.find(\r\n        s => s.validKeys.findIndex(i => i === e.keyCode) >= 0\r\n      );\r\n\r\n    //Get the keyboard inputs for the samples row\r\n    let sample = vm.samples.find(\r\n        s => s.validKeys.findIndex(i => i === e.keyCode) >= 0\r\n      );\r\n\r\n    //Get value of currently selected synth\r\n    let selectedSynth = vm.selectedSynth.value;\r\n    //console.log(selectedSynth);\r\n\r\n    // Reset property for CSS transition on notes row\r\n      function resetNoteTransition() {\r\n        note.isPlaying = false;\r\n      }\r\n\r\n    // Reset property for CSS transition on samples row\r\n      function resetSampleTransition() {\r\n        sample.isPlaying = false;\r\n      }\r\n\r\n      //toggle focus on synth input\r\n      function focusInput() {\r\n        vm.$refs.synthSelect.focus();\r\n      }\r\n\r\n    // Play a note given the set duration, start css effect\r\n      if (note && selectedSynth == 1) {\r\n        focusInput();\r\n        var instrument = fm.triggerAttackRelease(note.note, note.noteDuration);\r\n        //Kick off CSS effects\r\n        note.isPlaying = true;\r\n        setTimeout(resetNoteTransition, note.styleDuration);\r\n      } \r\n      else if (note && selectedSynth == 2) {\r\n        var instrument = am.triggerAttackRelease(note.note, note.noteDuration);\r\n        //Kick off CSS effects\r\n        note.isPlaying = true;\r\n        setTimeout(resetNoteTransition, note.styleDuration);\r\n      } else if (note && selectedSynth == 3){\r\n        var instrument = duo.triggerAttackRelease(note.note, note.noteDuration);\r\n        //Kick off CSS effects\r\n        note.isPlaying = true;\r\n        setTimeout(resetNoteTransition, note.styleDuration);\r\n      } else if (note && selectedSynth == 4) {\r\n        var instrument = poly.triggerAttackRelease([note.note, 'A4', 'D#3'], note.noteDuration);\r\n        //Kick off CSS effects\r\n        note.isPlaying = true;\r\n        setTimeout(resetNoteTransition, note.styleDuration);\r\n      }\r\n\r\n      // Play audio sample and start CSS effect for the property's duration\r\n      const player = new Tone.Player(sample.url).toDestination();\r\n      Tone.loaded().then(() => {\r\n        player.start();\r\n        // connect the player to the feedback delay and filter in parallel\r\n        player.connect(filter);\r\n        player.connect(feedbackDelay);\r\n        sample.isPlaying = true;\r\n        setTimeout(resetSampleTransition, sample.styleDuration);\r\n      });\r\n    });\r\n  },\r\n};\r\n</script>\r\n"]}]}