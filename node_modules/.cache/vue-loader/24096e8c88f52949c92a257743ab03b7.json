{"remainingRequest":"C:\\PluralsightProjects\\webpack-starter-master\\metal-calculator2022\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\PluralsightProjects\\webpack-starter-master\\metal-calculator2022\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\PluralsightProjects\\webpack-starter-master\\metal-calculator2022\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\PluralsightProjects\\webpack-starter-master\\metal-calculator2022\\src\\views\\metalcalculator.vue?vue&type=template&id=4e0efd9f&","dependencies":[{"path":"C:\\PluralsightProjects\\webpack-starter-master\\metal-calculator2022\\src\\views\\metalcalculator.vue","mtime":1603993913102},{"path":"C:\\PluralsightProjects\\webpack-starter-master\\metal-calculator2022\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\PluralsightProjects\\webpack-starter-master\\metal-calculator2022\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\PluralsightProjects\\webpack-starter-master\\metal-calculator2022\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\PluralsightProjects\\webpack-starter-master\\metal-calculator2022\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"div\",\n    { staticClass: \"content-container\" },\n    [\n      _vm._m(0),\n      _c(\n        \"marquee\",\n        {\n          staticClass: \"marquee\",\n          attrs: { behavior: \"scroll\", direction: \"left\", id: \"marquee\" }\n        },\n        [\n          _vm._v(\"Gold Price Per Ounce\\n    \"),\n          _c(\"span\", { class: [_vm.metals.gold.isActive ? \"metalUp\" : \"\"] }, [\n            _vm._v(_vm._s(_vm.formatCurrency(_vm.metals.gold.price)))\n          ]),\n          _vm._v(\n            \"\\n    Silver Price Per Ounce \" +\n              _vm._s(_vm.formatCurrency(_vm.metals.silver.price)) +\n              \" Platinum\\n    Price Per Ounce \" +\n              _vm._s(_vm.formatCurrency(_vm.metals.platinum.price)) +\n              \" Palladium\\n    Price Per Ounce \" +\n              _vm._s(_vm.formatCurrency(_vm.metals.palladium.price)) +\n              \"\\n  \"\n          )\n        ]\n      ),\n      _c(\"div\", { staticClass: \"section content-title-group\" }),\n      _c(\"div\", { staticClass: \"columns\" }, [\n        _c(\"div\", { staticClass: \"column is-8\" }, [\n          _c(\"div\", { staticClass: \"card edit-detail\" }, [\n            _vm._m(1),\n            _c(\"div\", { staticClass: \"card-content\" }, [\n              _c(\"div\", { staticClass: \"content\" }, [\n                _c(\"p\", { staticClass: \"name\" }, [_vm._v(\"Gold\")]),\n                _c(\"div\", { staticClass: \"columns\" }, [\n                  _c(\"div\", { staticClass: \"column is-3\" }, [\n                    _c(\n                      \"label\",\n                      { staticClass: \"label\", attrs: { for: \"goldGramPrice\" } },\n                      [_vm._v(\"\\n                  Price Per Gram\")]\n                    ),\n                    _c(\"input\", {\n                      directives: [\n                        {\n                          name: \"model\",\n                          rawName: \"v-model\",\n                          value: _vm.metals.gold.gramPrice,\n                          expression: \"metals.gold.gramPrice\"\n                        }\n                      ],\n                      staticClass: \"input\",\n                      attrs: { id: \"goldGramPrice\" },\n                      domProps: { value: _vm.metals.gold.gramPrice },\n                      on: {\n                        input: function($event) {\n                          if ($event.target.composing) {\n                            return\n                          }\n                          _vm.$set(\n                            _vm.metals.gold,\n                            \"gramPrice\",\n                            $event.target.value\n                          )\n                        }\n                      }\n                    })\n                  ]),\n                  _c(\"div\", { staticClass: \"column is-3\" }, [\n                    _c(\n                      \"label\",\n                      { staticClass: \"label\", attrs: { for: \"goldGrams\" } },\n                      [_vm._v(\"Number of Grams\")]\n                    ),\n                    _c(\"input\", {\n                      directives: [\n                        {\n                          name: \"model\",\n                          rawName: \"v-model\",\n                          value: _vm.metals.gold.grams,\n                          expression: \"metals.gold.grams\"\n                        }\n                      ],\n                      staticClass: \"input\",\n                      attrs: { id: \"\" },\n                      domProps: { value: _vm.metals.gold.grams },\n                      on: {\n                        input: function($event) {\n                          if ($event.target.composing) {\n                            return\n                          }\n                          _vm.$set(\n                            _vm.metals.gold,\n                            \"grams\",\n                            $event.target.value\n                          )\n                        }\n                      }\n                    })\n                  ]),\n                  _c(\"div\", { staticClass: \"column is-2\" }, [\n                    _c(\"label\", { staticClass: \"label\" }, [_vm._v(\"Karat \")]),\n                    _c(\"div\", { staticClass: \"control\" }, [\n                      _c(\"div\", { staticClass: \"select\" }, [\n                        _c(\n                          \"select\",\n                          {\n                            directives: [\n                              {\n                                name: \"model\",\n                                rawName: \"v-model\",\n                                value: _vm.metals.gold.selectedKarat,\n                                expression: \"metals.gold.selectedKarat\"\n                              }\n                            ],\n                            on: {\n                              keyup: function($event) {\n                                if (\n                                  !$event.type.indexOf(\"key\") &&\n                                  _vm._k(\n                                    $event.keyCode,\n                                    \"esc\",\n                                    27,\n                                    $event.key,\n                                    [\"Esc\", \"Escape\"]\n                                  )\n                                ) {\n                                  return null\n                                }\n                                return _vm.clearkarat($event)\n                              },\n                              change: function($event) {\n                                var $$selectedVal = Array.prototype.filter\n                                  .call($event.target.options, function(o) {\n                                    return o.selected\n                                  })\n                                  .map(function(o) {\n                                    var val = \"_value\" in o ? o._value : o.value\n                                    return val\n                                  })\n                                _vm.$set(\n                                  _vm.metals.gold,\n                                  \"selectedKarat\",\n                                  $event.target.multiple\n                                    ? $$selectedVal\n                                    : $$selectedVal[0]\n                                )\n                              }\n                            }\n                          },\n                          _vm._l(_vm.metals.gold.karats, function(\n                            karat,\n                            index\n                          ) {\n                            return _c(\n                              \"option\",\n                              { key: index, domProps: { value: karat } },\n                              [_vm._v(_vm._s(karat.name))]\n                            )\n                          }),\n                          0\n                        )\n                      ])\n                    ])\n                  ]),\n                  _c(\"div\", { staticClass: \"column is-4\" }, [\n                    _c(\n                      \"label\",\n                      { staticClass: \"label\", attrs: { for: \"goldGramValue\" } },\n                      [_vm._v(\"Value\")]\n                    ),\n                    _c(\n                      \"label\",\n                      {\n                        staticClass: \"input\",\n                        attrs: { id: \"goldGramValue\", readonly: \"\" }\n                      },\n                      [_vm._v(_vm._s(_vm.goldGramValue))]\n                    )\n                  ])\n                ]),\n                _c(\n                  \"label\",\n                  {\n                    staticClass: \"label\",\n                    attrs: { for: \"goldGramValueDayTrend\" }\n                  },\n                  [_vm._v(\"1 Week Projected Gram Price\")]\n                ),\n                _c(\n                  \"label\",\n                  {\n                    staticClass: \"input\",\n                    attrs: { id: \"goldGramValueDayTrend\", readonly: \"\" }\n                  },\n                  [_vm._v(_vm._s(_vm.goldGramValueDayTrend))]\n                )\n              ]),\n              _c(\"br\"),\n              _c(\"p\", { staticClass: \"name\" }, [_vm._v(\"Silver\")]),\n              _c(\"div\", { staticClass: \"columns\" }, [\n                _c(\"div\", { staticClass: \"column is-3\" }, [\n                  _c(\n                    \"label\",\n                    { staticClass: \"label\", attrs: { for: \"silverGramPrice\" } },\n                    [_vm._v(\"\\n                Price Per Gram\")]\n                  ),\n                  _c(\"input\", {\n                    directives: [\n                      {\n                        name: \"model\",\n                        rawName: \"v-model\",\n                        value: _vm.metals.silver.gramPrice,\n                        expression: \"metals.silver.gramPrice\"\n                      }\n                    ],\n                    staticClass: \"input\",\n                    attrs: { id: \"silverGramPrice\" },\n                    domProps: { value: _vm.metals.silver.gramPrice },\n                    on: {\n                      input: function($event) {\n                        if ($event.target.composing) {\n                          return\n                        }\n                        _vm.$set(\n                          _vm.metals.silver,\n                          \"gramPrice\",\n                          $event.target.value\n                        )\n                      }\n                    }\n                  })\n                ]),\n                _c(\"div\", { staticClass: \"column is-3\" }, [\n                  _c(\n                    \"label\",\n                    { staticClass: \"label\", attrs: { for: \"silverGrams\" } },\n                    [_vm._v(\"Number of Grams\")]\n                  ),\n                  _c(\"input\", {\n                    directives: [\n                      {\n                        name: \"model\",\n                        rawName: \"v-model\",\n                        value: _vm.metals.silver.grams,\n                        expression: \"metals.silver.grams\"\n                      }\n                    ],\n                    staticClass: \"input\",\n                    attrs: { id: \"silverGrams\" },\n                    domProps: { value: _vm.metals.silver.grams },\n                    on: {\n                      input: function($event) {\n                        if ($event.target.composing) {\n                          return\n                        }\n                        _vm.$set(\n                          _vm.metals.silver,\n                          \"grams\",\n                          $event.target.value\n                        )\n                      }\n                    }\n                  })\n                ]),\n                _c(\"div\", { staticClass: \"column is-2\" }, [\n                  _c(\"label\", { staticClass: \"label\" }, [_vm._v(\"Purity\")]),\n                  _c(\"div\", { staticClass: \"control\" }, [\n                    _c(\n                      \"label\",\n                      { staticClass: \"radio\", attrs: { for: \"fine\" } },\n                      [\n                        _c(\"input\", {\n                          directives: [\n                            {\n                              name: \"model\",\n                              rawName: \"v-model\",\n                              value: _vm.metals.silver.purity,\n                              expression: \"metals.silver.purity\"\n                            }\n                          ],\n                          attrs: { type: \"radio\", id: \"fine\", value: \"fine\" },\n                          domProps: {\n                            checked: _vm._q(_vm.metals.silver.purity, \"fine\")\n                          },\n                          on: {\n                            change: function($event) {\n                              return _vm.$set(\n                                _vm.metals.silver,\n                                \"purity\",\n                                \"fine\"\n                              )\n                            }\n                          }\n                        }),\n                        _vm._v(\"\\n                  Fine\\n                \")\n                      ]\n                    ),\n                    _c(\"label\", { staticClass: \"radio\" }, [\n                      _c(\"input\", {\n                        directives: [\n                          {\n                            name: \"model\",\n                            rawName: \"v-model\",\n                            value: _vm.metals.silver.purity,\n                            expression: \"metals.silver.purity\"\n                          }\n                        ],\n                        attrs: {\n                          type: \"radio\",\n                          id: \"sterling\",\n                          value: \"sterling\"\n                        },\n                        domProps: {\n                          checked: _vm._q(_vm.metals.silver.purity, \"sterling\")\n                        },\n                        on: {\n                          change: function($event) {\n                            return _vm.$set(\n                              _vm.metals.silver,\n                              \"purity\",\n                              \"sterling\"\n                            )\n                          }\n                        }\n                      }),\n                      _vm._v(\"\\n                  Sterling\\n                \")\n                    ])\n                  ])\n                ]),\n                _c(\"div\", { staticClass: \"column is-4\" }, [\n                  _c(\n                    \"label\",\n                    { staticClass: \"label\", attrs: { for: \"silverGramValue\" } },\n                    [_vm._v(\"Value\")]\n                  ),\n                  _c(\n                    \"label\",\n                    {\n                      staticClass: \"input\",\n                      attrs: { id: \"silverGramValue\", readonly: \"\" }\n                    },\n                    [_vm._v(_vm._s(_vm.silverGramValue))]\n                  )\n                ])\n              ]),\n              _c(\"p\", { staticClass: \"name\" }, [_vm._v(\"Platinum\")]),\n              _c(\"div\", { staticClass: \"columns\" }, [\n                _c(\"div\", { staticClass: \"column is-3\" }, [\n                  _c(\n                    \"label\",\n                    {\n                      staticClass: \"label\",\n                      attrs: { for: \"platinumGramPrice\" }\n                    },\n                    [_vm._v(\"\\n                Price Per Gram\")]\n                  ),\n                  _c(\"input\", {\n                    directives: [\n                      {\n                        name: \"model\",\n                        rawName: \"v-model\",\n                        value: _vm.metals.platinum.gramPrice,\n                        expression: \"metals.platinum.gramPrice\"\n                      }\n                    ],\n                    staticClass: \"input\",\n                    attrs: { id: \"platinumGramPrice\" },\n                    domProps: { value: _vm.metals.platinum.gramPrice },\n                    on: {\n                      input: function($event) {\n                        if ($event.target.composing) {\n                          return\n                        }\n                        _vm.$set(\n                          _vm.metals.platinum,\n                          \"gramPrice\",\n                          $event.target.value\n                        )\n                      }\n                    }\n                  })\n                ]),\n                _c(\"div\", { staticClass: \"column is-3\" }, [\n                  _c(\n                    \"label\",\n                    { staticClass: \"label\", attrs: { for: \"platinumGrams\" } },\n                    [_vm._v(\"Number of Grams\")]\n                  ),\n                  _c(\"input\", {\n                    directives: [\n                      {\n                        name: \"model\",\n                        rawName: \"v-model\",\n                        value: _vm.metals.platinum.grams,\n                        expression: \"metals.platinum.grams\"\n                      }\n                    ],\n                    staticClass: \"input\",\n                    attrs: { id: \"platinumGrams\" },\n                    domProps: { value: _vm.metals.platinum.grams },\n                    on: {\n                      input: function($event) {\n                        if ($event.target.composing) {\n                          return\n                        }\n                        _vm.$set(\n                          _vm.metals.platinum,\n                          \"grams\",\n                          $event.target.value\n                        )\n                      }\n                    }\n                  })\n                ]),\n                _c(\"div\", { staticClass: \"column is-6\" }, [\n                  _c(\n                    \"label\",\n                    {\n                      staticClass: \"label\",\n                      attrs: { for: \"platinumGramValue\" }\n                    },\n                    [_vm._v(\"Value\")]\n                  ),\n                  _c(\n                    \"label\",\n                    {\n                      staticClass: \"input\",\n                      attrs: { id: \"platinumGramValue\", readonly: \"\" }\n                    },\n                    [_vm._v(_vm._s(_vm.platiumGramValue))]\n                  )\n                ])\n              ]),\n              _c(\"p\", { staticClass: \"name\" }, [_vm._v(\"Palladium\")]),\n              _c(\"div\", { staticClass: \"columns\" }, [\n                _c(\"div\", { staticClass: \"column is-3\" }, [\n                  _c(\n                    \"label\",\n                    {\n                      staticClass: \"label\",\n                      attrs: { for: \"palladiumGramPrice\" }\n                    },\n                    [_vm._v(\"\\n                Price Per Gram\")]\n                  ),\n                  _c(\"input\", {\n                    directives: [\n                      {\n                        name: \"model\",\n                        rawName: \"v-model\",\n                        value: _vm.metals.palladium.gramPrice,\n                        expression: \"metals.palladium.gramPrice\"\n                      }\n                    ],\n                    staticClass: \"input\",\n                    attrs: { id: \"palladiumGramPrice\" },\n                    domProps: { value: _vm.metals.palladium.gramPrice },\n                    on: {\n                      input: function($event) {\n                        if ($event.target.composing) {\n                          return\n                        }\n                        _vm.$set(\n                          _vm.metals.palladium,\n                          \"gramPrice\",\n                          $event.target.value\n                        )\n                      }\n                    }\n                  })\n                ]),\n                _c(\"div\", { staticClass: \"column is-3\" }, [\n                  _c(\n                    \"label\",\n                    { staticClass: \"label\", attrs: { for: \"palladiumGrams\" } },\n                    [_vm._v(\"Number of Grams\")]\n                  ),\n                  _c(\"input\", {\n                    directives: [\n                      {\n                        name: \"model\",\n                        rawName: \"v-model\",\n                        value: _vm.metals.palladium.grams,\n                        expression: \"metals.palladium.grams\"\n                      }\n                    ],\n                    staticClass: \"input\",\n                    attrs: { id: \"palladiumGrams\" },\n                    domProps: { value: _vm.metals.palladium.grams },\n                    on: {\n                      input: function($event) {\n                        if ($event.target.composing) {\n                          return\n                        }\n                        _vm.$set(\n                          _vm.metals.palladium,\n                          \"grams\",\n                          $event.target.value\n                        )\n                      }\n                    }\n                  })\n                ]),\n                _c(\"div\", { staticClass: \"column is-6\" }, [\n                  _c(\n                    \"label\",\n                    {\n                      staticClass: \"label\",\n                      attrs: { for: \"palladiumGramValue\" }\n                    },\n                    [_vm._v(\"Value\")]\n                  ),\n                  _c(\n                    \"label\",\n                    {\n                      staticClass: \"input\",\n                      attrs: { id: \"palladiumGramValue\", readonly: \"\" }\n                    },\n                    [_vm._v(_vm._s(_vm.palladiumGramValue))]\n                  )\n                ])\n              ])\n            ])\n          ])\n        ])\n      ])\n    ],\n    1\n  )\n}\nvar staticRenderFns = [\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"div\", { staticClass: \"section content-title-group\" }, [\n      _c(\"h2\", { staticClass: \"title\" }, [_vm._v(\"Cambone Metal Calculator\")])\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"header\", { staticClass: \"card-header\" }, [\n      _c(\"p\", { staticClass: \"card-header-title\" })\n    ])\n  }\n]\nrender._withStripped = true\n\nexport { render, staticRenderFns }"]}