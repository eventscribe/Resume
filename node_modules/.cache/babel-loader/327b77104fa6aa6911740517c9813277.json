{"remainingRequest":"C:\\PluralsightProjects\\webpack-starter-master\\metal-calculator\\node_modules\\babel-loader\\lib\\index.js!C:\\PluralsightProjects\\webpack-starter-master\\metal-calculator\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\PluralsightProjects\\webpack-starter-master\\metal-calculator\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\PluralsightProjects\\webpack-starter-master\\metal-calculator\\src\\components\\heroes.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\PluralsightProjects\\webpack-starter-master\\metal-calculator\\src\\components\\heroes.vue","mtime":1584403528117},{"path":"C:\\PluralsightProjects\\webpack-starter-master\\metal-calculator\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\PluralsightProjects\\webpack-starter-master\\metal-calculator\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\PluralsightProjects\\webpack-starter-master\\metal-calculator\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\PluralsightProjects\\webpack-starter-master\\metal-calculator\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _toConsumableArray from \"C:\\\\PluralsightProjects\\\\webpack-starter-master\\\\metal-calculator\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/toConsumableArray\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport axios from 'axios'; //import numbro from 'numbro';\n\nvar numbro = require(\"numbro\");\n\nimport regression from 'regression';\nexport default {\n  name: \"metalCalculator\",\n  data: function data() {\n    return {\n      formName: \"Calculator\",\n      metals: {\n        gold: {\n          price: 0,\n          gramPrice: 0,\n          grams: 0,\n          selectedKarat: {\n            name: \"24K\",\n            value: 1\n          },\n          karats: [{\n            name: \"24K\",\n            value: 1\n          }, {\n            name: \"22K\",\n            value: .917\n          }, {\n            name: \"18K\",\n            value: .75\n          }, {\n            name: \"14K\",\n            value: .583\n          }, {\n            name: \"10K\",\n            value: .417\n          }, {\n            name: \"8K\",\n            value: .2\n          }],\n          isActive: true,\n          timer: null,\n          data: []\n        },\n        silver: {\n          price: 0,\n          gramPrice: 0,\n          grams: 0,\n          purity: 'fine',\n          timer: null,\n          data: {}\n        },\n        platinum: {\n          price: 0,\n          gramPrice: 0,\n          grams: 0,\n          timer: null,\n          data: {}\n        },\n        palladium: {\n          price: 0,\n          gramPrice: 0,\n          grams: 0,\n          timer: null,\n          data: {}\n        }\n      },\n      message: ''\n    };\n  },\n  computed: {\n    goldGramValue: function goldGramValue() {\n      var ggv = numbro.unformat(this.metals.gold.gramPrice) * numbro.unformat(this.metals.gold.grams ? this.metals.gold.grams : 0) * this.metals.gold.selectedKarat.value;\n      return this.formatCurrency(ggv);\n    },\n    goldGramValueDayTrend: function goldGramValueDayTrend() {\n      var prediction = 0;\n\n      if (this.metals.gold.data.length > 0) {\n        var dayCount = 30; //Take the dayCount number of items, put them in an array adding an Identifier starting at 1\n\n        var data = _toConsumableArray(this.metals.gold.data.slice(0, dayCount)).reverse().map(function (i, index) {\n          return [index + 1, i[1]];\n        }); //console.log(data);\n\n\n        var r = regression.linear(data);\n        console.log(r);\n        prediction = r.predict(dayCount + 7)[1];\n        console.log(prediction);\n        prediction = numbro(prediction / 31.1).formatCurrency({\n          mantissa: 2\n        });\n      } //console.log(prediction);\n\n\n      return prediction;\n    },\n    silverGramValue: function silverGramValue() {\n      var purityValue = 1;\n\n      if (this.metals.silver.purity == 'sterling') {\n        purityValue = .925;\n      }\n\n      var sgv = numbro.unformat(this.metals.silver.gramPrice) * numbro.unformat(this.metals.silver.grams ? this.metals.silver.grams : 0) * purityValue;\n      return this.formatCurrency(sgv);\n    },\n    platiumGramValue: function platiumGramValue() {\n      var pgv = numbro.unformat(this.metals.platinum.gramPrice) * numbro.unformat(this.metals.platinum.grams ? this.metals.platinum.grams : 0);\n      return this.formatCurrency(pgv);\n    },\n    palladiumGramValue: function palladiumGramValue() {\n      var ppgv = numbro.unformat(this.metals.palladium.gramPrice) * numbro.unformat(this.metals.palladium.grams ? this.metals.palladium.grams : 0);\n      return this.formatCurrency(ppgv);\n    }\n  },\n  watch: {\n    'metals.gold.price': function metalsGoldPrice(newVal, oldVal) {\n      var vm = this; //TODO Switch isActive flag so red appears only on price change\n      //alert(`yes, computed property changed from ${newVal} to ${oldVal}`);\n\n      if (newVal > oldVal) {\n        vm._data.metals.gold.isActive = true;\n      } else {\n        vm._data.metals.gold.isActive = false;\n      }\n\n      return vm;\n    }\n  },\n  methods: {\n    cancelmetal: function cancelmetal() {\n      this.message = '';\n    },\n    clearkarat: function clearkarat() {\n      this.metals.gold.selectedKarat = 1;\n    },\n    savemetal: function savemetal() {\n      // This only updates when you click the save button\n      this.message = JSON.stringify(this.metals, null, '\\n ');\n    },\n    formatCurrency: function formatCurrency(val) {\n      return numbro(val).formatCurrency({\n        thousandSeparated: true,\n        mantissa: 2\n      });\n    },\n    goldTimer: function goldTimer() {\n      if (Math.floor(Math.random() * 10) >= 4) {\n        this.updateGoldValue(this.metals.gold.price + .314);\n      } else {\n        this.updateGoldValue(this.metals.gold.price - .314);\n      }\n    },\n    updateGoldValue: function updateGoldValue(goldPrice) {\n      this.metals.gold.price = goldPrice;\n      this.metals.gold.gramPrice = numbro(goldPrice / 31.1).formatCurrency({\n        mantissa: 2\n      }); //console.log(goldPrice);\n    },\n    silverTimer: function silverTimer() {\n      if (Math.floor(Math.random() * 10) >= 4) {\n        this.updateSilverValue(this.metals.silver.price + .01);\n      } else {\n        this.updateSilverValue(this.metals.silver.price - .01);\n      }\n    },\n    updateSilverValue: function updateSilverValue(silverPrice) {\n      this.metals.silver.price = silverPrice;\n      this.metals.silver.gramPrice = numbro(silverPrice / 31.1).formatCurrency({\n        mantissa: 2\n      }); //console.log(silverPrice);\n    },\n    updatePlantinumValue: function updatePlantinumValue(platinumPrice) {\n      this.metals.platinum.price = platinumPrice;\n      this.metals.platinum.gramPrice = numbro(platinumPrice / 31.1).formatCurrency({\n        mantissa: 2\n      }); //console.log(platinumPrice);\n    },\n    updatePalladiumValue: function updatePalladiumValue(palladiumPrice) {\n      this.metals.palladium.price = palladiumPrice;\n      this.metals.palladium.gramPrice = numbro(palladiumPrice / 31.1).formatCurrency({\n        mantissa: 2\n      });\n      console.log(palladiumPrice);\n    }\n  },\n  created: function created() {\n    var _this = this;\n\n    axios.get('https://www.quandl.com/api/v3/datasets/LBMA/GOLD.json?api_key=onMsLhc34xCSgUj-sj2q').then(function (response) {\n      _this.metals.gold.data = response.data.dataset.data;\n\n      _this.updateGoldValue(response.data.dataset.data[0][1]); //if (!this.metals.gold.timer) {\n      //this.metals.gold.timer = setInterval(this.goldTimer,3000)\n      //}\n\n    });\n    axios.get('https://www.quandl.com/api/v3/datasets/LBMA/SILVER.json?api_key=onMsLhc34xCSgUj-sj2q').then(function (response) {\n      _this.metals.silver.data = response.data;\n\n      _this.updateSilverValue(response.data.dataset.data[0][1]); //if (!this.metals.silver.timer) {\n      //this.metals.silver.timer = setInterval(this.silverTimer,3000);\n      //}\n\n    });\n    axios.get('https://www.quandl.com/api/v3/datasets/LPPM/PLAT?start_date=2020-03-11&end_date=2020-03-11&api_key=onMsLhc34xCSgUj-sj2q', {\n      headers: {\n        accept: 'application/json'\n      }\n    }).then(function (response) {\n      _this.metals.platinum.data = response.data.dataset.data;\n\n      _this.updatePlantinumValue(response.data.dataset.data[0][1]); //console.log(this.metals.platinum.gramPrice);\n\n    });\n    axios.get('https://www.quandl.com/api/v3/datasets/LPPM/PALL?start_date=2020-03-11&end_date=2020-03-11&api_key=onMsLhc34xCSgUj-sj2q', {\n      headers: {\n        accept: 'application/json'\n      }\n    }).then(function (response) {\n      _this.metals.palladium.data = response.data.dataset.data;\n\n      _this.updatePalladiumValue(response.data.dataset.data[0][1]);\n\n      console.log(_this.metals.palladium.gramPrice);\n    });\n  }\n};",{"version":3,"sources":["heroes.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"content-container\">\n    <marquee behavior=\"scroll\" direction=\"left\" class=\"marquee\" id=\"marquee\">Gold Price Per Ounce <span :class=\"[metals.gold.isActive ? 'metalUp' : '']\">{{ formatCurrency(metals.gold.price) }}</span> \n                                                             Silver Price Per Ounce {{ formatCurrency(metals.silver.price) }}\n                                                             Platinum Price Per Ounce {{ formatCurrency(metals.platinum.price) }}\n                                                             Palladium Price Per Ounce {{ formatCurrency(metals.palladium.price) }}\n                                                             </marquee>\n    <div class=\"section content-title-group\">\n      \n    </div>\n    <div class=\"columns\">\n      <div class=\"column is-8\">\n        <div class=\"card edit-detail\">\n          <header class=\"card-header\">\n            <p class=\"card-header-title\">{{  }}</p>\n          </header>\n          <div class=\"card-content\">\n            <div class=\"content\"> \n              <p class=\"name\">Gold</p>           \n              <div class=\"columns\">\n                <div class=\"column is-3\">\n                  <label class=\"label\" for=\"goldGramPrice\"> Price Per Gram</label>\n                  <input class=\"input\" id=\"goldGramPrice\" v-model=\"metals.gold.gramPrice\" />\n                </div>\n                <div class=\"column is-3\">\n                  <label class=\"label\" for=\"goldGrams\">Number of Grams</label>\n                  <input class=\"input\" id=\"\" v-model=\"metals.gold.grams\" />\n                </div>\n                <div class=\"column is-2\">\n                  <label class=\"label\">Karat </label>\n                  <div class=\"control\">\n                    <div class=\"select\">\n                      <select v-model=\"metals.gold.selectedKarat\" @keyup.esc=\"clearkarat\">\n                        <option v-for=\"(karat,index) in metals.gold.karats\" :key=\"index\" :value=\"karat\">{{karat.name}}</option>\n                      </select>\n                    </div>\n                  </div>\n                </div>\n                <div class=\"column is-4\">\n                  <label class=\"label\" for=\"goldGramValue\">Value</label>\n                  <label class=\"input\" id=\"goldGramValue\" readonly>{{ goldGramValue }}</label>\n              </div>\n              </div>\n              <label class=\"label\" for=\"goldGramValueDayTrend\">1 Week Projected Gram Price</label>\n              <label class=\"input\" id=\"goldGramValueDayTrend\" readonly>{{ goldGramValueDayTrend }}</label>\n              </div>\n              <br>\n              <p class=\"name\">Silver</p>           \n              <div class=\"columns\">\n                <div class=\"column is-3\">\n                  <label class=\"label\" for=\"silverGramPrice\"> Price Per Gram</label>\n                  <input class=\"input\" id=\"silverGramPrice\" v-model=\"metals.silver.gramPrice\" />\n                </div>\n                <div class=\"column is-3\">\n                  <label class=\"label\" for=\"silverGrams\">Number of Grams</label>\n                  <input class=\"input\" id=\"silverGrams\" v-model=\"metals.silver.grams\" />\n                </div>\n                <div class=\"column is-2\">\n                  <label class=\"label\">Purity</label>\n                  <div class=\"control\">\n                    <label class=\"radio\" for=\"fine\">\n                      <input type=\"radio\" id=\"fine\" value=\"fine\" v-model=\"metals.silver.purity\">\n                      Fine\n                    </label>\n                    <label class=\"radio\">\n                      <input type=\"radio\" id=\"sterling\" value=\"sterling\" v-model=\"metals.silver.purity\">\n                      Sterling\n                    </label>\n                  </div>\n                </div>\n                <div class=\"column is-4\">\n                  <label class=\"label\" for=\"silverGramValue\">Value</label>\n                  <label class=\"input\" id=\"silverGramValue\" readonly>{{ silverGramValue }}</label>\n              </div>\n              </div>\n              <p class=\"name\">Platinum</p>           \n              <div class=\"columns\">\n                <div class=\"column is-3\">\n                  <label class=\"label\" for=\"platinumGramPrice\"> Price Per Gram</label>\n                  <input class=\"input\" id=\"platinumGramPrice\" v-model=\"metals.platinum.gramPrice\" />\n                </div>\n                <div class=\"column is-3\">\n                  <label class=\"label\" for=\"platinumGrams\">Number of Grams</label>\n                  <input class=\"input\" id=\"platinumGrams\" v-model=\"metals.platinum.grams\" />\n                </div>\n                <div class=\"column is-6\">\n                  <label class=\"label\" for=\"platinumGramValue\">Value</label>\n                  <label class=\"input\" id=\"platinumGramValue\" readonly>{{ platiumGramValue }}</label>\n              </div>\n              </div>             \n              <p class=\"name\">Palladium</p>           \n              <div class=\"columns\">\n                <div class=\"column is-3\">\n                  <label class=\"label\" for=\"palladiumGramPrice\"> Price Per Gram</label>\n                  <input class=\"input\" id=\"palladiumGramPrice\" v-model=\"metals.palladium.gramPrice\" />\n                </div>\n                <div class=\"column is-3\">\n                  <label class=\"label\" for=\"palladiumGrams\">Number of Grams</label>\n                  <input class=\"input\" id=\"palladiumGrams\" v-model=\"metals.palladium.grams\" />\n                </div>\n                <div class=\"column is-6\">\n                  <label class=\"label\" for=\"palladiumGramValue\">Value</label>\n                  <label class=\"input\" id=\"palladiumGramValue\" readonly>{{ palladiumGramValue }}</label>\n              </div>\n              </div>\n            </div> \n          </div> \n        </div>\n      </div>\n    </div>\n  \n</template>\n\n<script>\nimport axios from 'axios';\n//import numbro from 'numbro';\nvar numbro = require(\"numbro\");\nimport regression from 'regression';\n\nexport default {\n  name: \"metalCalculator\",\n  data() {\n    return {\n      formName: \"Calculator\",\n       metals:{\n         gold:{\n           price: 0,\n           gramPrice: 0,\n           grams: 0,\n           selectedKarat: {name: \"24K\", value:1},\n           karats: [\n                {name: \"24K\", value:1},\n                {name:\"22K\", value:.917},\n                {name:\"18K\", value:.75},\n                {name:\"14K\", value:.583},\n                {name:\"10K\", value:.417},\n                {name:\"8K\", value:.2}\n           ],\n           isActive: true,\n           timer: null,\n           data: []\n         },\n         silver:{\n           price: 0,\n           gramPrice: 0,\n           grams: 0,\n           purity: 'fine',\n           timer: null,\n           data: {}\n         },\n         platinum:{\n           price: 0,\n           gramPrice: 0,\n           grams: 0,\n           timer: null,\n           data: {}\n         },\n         palladium:{\n           price: 0,\n           gramPrice: 0,\n           grams: 0,\n           timer: null,\n           data: {}\n         }\n       },\n       message: ''\n    };\n  },\n  computed: {\n    goldGramValue() {\n      let ggv = numbro.unformat(this.metals.gold.gramPrice) * numbro.unformat(this.metals.gold.grams?this.metals.gold.grams:0) * this.metals.gold.selectedKarat.value;\n      return this.formatCurrency(ggv);\n    },\n    goldGramValueDayTrend() {\n      let prediction = 0;\n      if(this.metals.gold.data.length > 0){\n        let dayCount = 30;\n        //Take the dayCount number of items, put them in an array adding an Identifier starting at 1\n        let data = [...this.metals.gold.data.slice(0, dayCount)].reverse().map((i, index) => [index + 1 , i[1]]);\n        //console.log(data);\n        let r = regression.linear(data);\n        console.log(r);\n        prediction = r.predict(dayCount + 7)[1];\n        console.log(prediction);\n        prediction = numbro(prediction / 31.1).formatCurrency({mantissa:2});\n      }\n      //console.log(prediction);\n      return prediction;\n    },\n    silverGramValue() {\n      let purityValue = 1\n      if (this.metals.silver.purity == 'sterling') {\n        purityValue = .925;\n      }\n      \n      let sgv = numbro.unformat(this.metals.silver.gramPrice) * numbro.unformat(this.metals.silver.grams?this.metals.silver.grams:0) * purityValue;\n      return this.formatCurrency(sgv);\n    },\n    platiumGramValue() {      \n      let pgv = numbro.unformat(this.metals.platinum.gramPrice) * numbro.unformat(this.metals.platinum.grams?this.metals.platinum.grams:0);\n      return this.formatCurrency(pgv);\n    },\n    palladiumGramValue() {      \n      let ppgv = numbro.unformat(this.metals.palladium.gramPrice) * numbro.unformat(this.metals.palladium.grams?this.metals.palladium.grams:0);\n      return this.formatCurrency(ppgv);\n    },\n  },\n\n  watch: {\n    'metals.gold.price'(newVal, oldVal) {\n      let vm = this;\n      //TODO Switch isActive flag so red appears only on price change\n      //alert(`yes, computed property changed from ${newVal} to ${oldVal}`);\n      if (newVal > oldVal) {\n        vm._data.metals.gold.isActive = true;\n      }\n      else {\n        vm._data.metals.gold.isActive = false;\n      }\n      return vm;\n    },\n\n  },\n\n  methods: {\n    cancelmetal() {\n      this.message = '';\n    },\n    clearkarat() {\n      this.metals.gold.selectedKarat = 1;\n    },\n    savemetal() {\n      // This only updates when you click the save button\n      this.message = JSON.stringify(this.metals, null, '\\n ');\n    },\n    formatCurrency(val) {\n      return numbro(val).formatCurrency({thousandSeparated: true,\n                                         mantissa:2});\n    },\n    goldTimer() {\n      if (Math.floor(Math.random() * 10) >= 4) {\n        this.updateGoldValue(this.metals.gold.price + .314);\n      }\n      else{\n        this.updateGoldValue(this.metals.gold.price - .314);\n      } \n    },\n    updateGoldValue(goldPrice) {\n      this.metals.gold.price = goldPrice;\n      this.metals.gold.gramPrice = numbro(goldPrice / 31.1).formatCurrency({mantissa:2});\n      //console.log(goldPrice);\n\n    },\n    silverTimer() {\n      if (Math.floor(Math.random() * 10) >= 4) {\n        this.updateSilverValue(this.metals.silver.price + .01);\n      }\n      else{\n        this.updateSilverValue(this.metals.silver.price - .01);\n      } \n    },\n    updateSilverValue(silverPrice) {\n      this.metals.silver.price = silverPrice;\n      this.metals.silver.gramPrice = numbro(silverPrice / 31.1).formatCurrency({mantissa:2});\n      //console.log(silverPrice);\n    },\n    updatePlantinumValue(platinumPrice) {\n      this.metals.platinum.price = platinumPrice;\n      this.metals.platinum.gramPrice = numbro(platinumPrice / 31.1).formatCurrency({mantissa:2});\n      //console.log(platinumPrice);\n    },\n    updatePalladiumValue(palladiumPrice) {\n      this.metals.palladium.price = palladiumPrice;\n      this.metals.palladium.gramPrice = numbro(palladiumPrice / 31.1).formatCurrency({mantissa:2});\n      console.log(palladiumPrice);\n    },    \n    },\n\n  created () {\n    axios\n      .get('https://www.quandl.com/api/v3/datasets/LBMA/GOLD.json?api_key=onMsLhc34xCSgUj-sj2q')\n      .then(response => {\n         this.metals.gold.data = response.data.dataset.data;\n         this.updateGoldValue(response.data.dataset.data[0][1]);\n         //if (!this.metals.gold.timer) {\n           //this.metals.gold.timer = setInterval(this.goldTimer,3000)\n         //}\n      });\n\n    axios\n      .get('https://www.quandl.com/api/v3/datasets/LBMA/SILVER.json?api_key=onMsLhc34xCSgUj-sj2q')\n      .then(response => {\n        this.metals.silver.data = response.data;\n        this.updateSilverValue(response.data.dataset.data[0][1]);\n        //if (!this.metals.silver.timer) {\n           //this.metals.silver.timer = setInterval(this.silverTimer,3000);\n           \n         //}\n      });\n\n      axios\n      .get('https://www.quandl.com/api/v3/datasets/LPPM/PLAT?start_date=2020-03-11&end_date=2020-03-11&api_key=onMsLhc34xCSgUj-sj2q'\n      ,{headers: {accept:'application/json'}})\n      .then(response => {\n        this.metals.platinum.data = response.data.dataset.data;\n        this.updatePlantinumValue(response.data.dataset.data[0][1]);\n        //console.log(this.metals.platinum.gramPrice);\n      });\n\n      axios\n      .get('https://www.quandl.com/api/v3/datasets/LPPM/PALL?start_date=2020-03-11&end_date=2020-03-11&api_key=onMsLhc34xCSgUj-sj2q'\n      ,{headers: {accept:'application/json'}})\n      .then(response => {\n        this.metals.palladium.data = response.data.dataset.data;\n        this.updatePalladiumValue(response.data.dataset.data[0][1]);\n        console.log(this.metals.palladium.gramPrice);\n      });\n      \n  },\n\n\n};\n</script>\n"],"sourceRoot":"src/components"}]}